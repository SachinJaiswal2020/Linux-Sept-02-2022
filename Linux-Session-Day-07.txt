
Table of Contents:-

##
Phase-01:-
1. Introduction to Enterprise Linux, and basic understanding/usages of Linux OS.
2. Editor understanding (vim).
3. User/Group management.
4. Linux Permission model.
##
Phase-02:-
5. Installation of Linux OS (Enterprise Server OS).
6. Processes Management (When any program under execution become a process- Will discuss this)
7. Booting sequence (Complate booting processes involved, How your Enterprise Linux OS starts and be ready for any appliactions deployment).

##
Phase-03:-
8. File System/Disk management (Linux Partitions - MBR & GPT, Linux File Systems, Moutning etc).
9. Logical Volume Manager (Linux Partition, PV, VG and lvm etc).
10. Swap management.
11. RAID Management.

##
Phase-04:-
12. Package management uging "yum" and "rpm".
13. Package management using Source.

##
Phase-05:-
14. Standard I/O Pipes.
15. STDIN 
16. STDOUT
17. STDINT
18. Essential System Administration Tools 
=======================########################====================================
Below points we have done (Pending topics we will be doing it).
1st we will do below concept's lab and will move to pending topics.

1. Introduction to Enterprise Linux, and basic understanding/usages of Linux OS.
2. Editor understanding (vim).
3. User/Group management.
4. Linux Permission model.
5. Installation of Linux OS (Enterprise Server OS).
8. File System/Disk management (Linux Partitions - MBR & GPT, Linux File Systems, Moutning etc).
9. Logical Volume Manager (Linux Partition, PV, VG and lvm etc).
10. Swap management.
12. Package management uging "yum" and "rpm".

########## As per below points/concepts - lab-04 ##########
14. Standard I/O Pipes.
15. STDIN 
16. STDOUT
17. STDINT
18. Essential System Administration Tools   (We will do Recap on this).
   
=======================


Processes Management:- 
 What is process ?
 - program under execution become process.
 - Process associated with it's components.
   PID, PPID, UID, GID, State of the prosess. etc 
   
   WHta is Fork?
 
 DEFINITION OF A PROCESS
A process is a running instance of a launched, executable program. A process consists of:
• An address space of allocated memory
• Security properties including ownership credentials and privileges
• One or more execution threads of program code
• Process state

The environment of a process includes:
• Local and global variables
• A current scheduling context
• Allocated system resources, such as file descriptors and network ports.


An existing (parent) process duplicates its own address space (fork) to create a new (child)
process structure. Every new process is assigned a unique process ID (PID) for tracking
and security. The PID and the parent's process ID (PPID) are elements of the new process
environment. Any process may create a child process. All processes are descendants of the first
system process, systemd on a Red Hat Enterprise Linux 8 system).

 ======================================
 Through the fork routine, a child process inherits security identities, previous and current file
descriptors, port and resource privileges, environment variables, and program code. A child
process may then exec its own program code. Normally, a parent process sleeps while the child
process runs, setting a request (wait) to be signaled when the child completes. Upon exit, the
child process has already closed or discarded its resources and environment. The only remaining
resource, called a zombie, is an entry in the process table. The parent, signaled awake when the
child exited, cleans the process table of the child's entry, thus freeing the last resource of the child
process. The parent process then continues with its own program code execution.

=======================================
DESCRIBING PROCESS STATES
In a multitasking operating system, each CPU (or CPU core) can be working on one process at
a single point in time. As a process runs, its immediate requirements for CPU time and resource
allocation change. Processes are assigned a state, which changes as circumstances dictate.

==========================
PROCESS STATE CODES
       Here are the different values that the s, stat and state output specifiers (header "STAT" or "S") will
       display to describe the state of a process:

               D    uninterruptible sleep (usually IO)
               R    running or runnable (on run queue)
               S    interruptible sleep (waiting for an event to complete)
               T    stopped by job control signal
               t    stopped by debugger during the tracing
               W    paging (not valid since the 2.6.xx kernel)
               X    dead (should never be seen)
               Z    defunct ("zombie") process, terminated but not reaped by its parent

       For BSD formats and when the stat keyword is used, additional characters may be displayed:

               <    high-priority (not nice to other users)
               N    low-priority (nice to other users)
               L    has pages locked into memory (for real-time and custom IO)
               s    is a session leader
               l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
               +    is in the foreground process group

====================
# ps  -aef
# ps -aef | grep bash 

top 5 processes consuming high CPU on this server.
 ps -eo pcpu,pid,ppid,user,stat,nice,comm | head -1 ; ps -eo pcpu,pid,ppid,user,stat,nice,comm | sort -nr | head -5
 ps -eo pcpu,pid,ppid,user,stat,nice,comm | head -1 ; ps -eo pcpu,pid,ppid,user,stat,nice,comm | sort -nr | head -10
 ps -eo pcpu,pid,ppid,user,stat,nice,comm | head -1 ; ps -eo pcpu,pid,ppid,user,stat,nice,comm | sort -nr | head -20
 


 top 5 processes consuming high memoery on this server.
 ps -eo pmem,pid,ppid,user,stat,nice,comm | head -1 ; ps -eo pmem,pid,ppid,user,stat,nice,comm | sort -nr | head -5
 ps -eo pmem,pid,ppid,user,stat,nice,comm | head -1 ; ps -eo pmem,pid,ppid,user,stat,nice,comm | sort -nr | head -10
 ps -eo pmem,pid,ppid,user,stat,nice,comm | head -1 ; ps -eo pmem,pid,ppid,user,stat,nice,comm | sort -nr | head -20



kill -l 
It will; show all the signals 

kill
kill -9  <PID_no>
kill -15 <PID_no>


===================
Any process with priority 

[root@server01 work]# nice -n -17 ./testing.sh

[root@server01 work]# for x in {1..1000}; do ps -eo pid,ppid,user,stat,nice,comm | head -1 ;  ps -eo pid,ppid,user,stat,nice,comm | grep testing | grep -v grep ; sleep 2; echo "----------------------------------------------------------------------"; done
  PID  PPID USER     STAT  NI COMMAND
 6209  2941 root     S<+  -20 testing.sh
----------------------------------------------------------------------
  PID  PPID USER     STAT  NI COMMAND
 6209  2941 root     S<+  -20 testing.sh
----------------------------------------------------------------------
  PID  PPID USER     STAT  NI COMMAND
 6209  2941 root     S<+  -20 testing.sh
^C
[root@server01 work]# for x in {1..1000}; do ps -eo pid,ppid,user,stat,nice,comm | head -1 ;  ps -eo pid,ppid,user,stat,nice,comm | grep testing | grep -v grep ; sleep 2; echo "----------------------------------------------------------------------"; done
  PID  PPID USER     STAT  NI COMMAND
 6262  2941 root     S<+  -17 testing.sh
----------------------------------------------------------------------
  PID  PPID USER     STAT  NI COMMAND
 6262  2941 root     S<+  -17 testing.sh
^C
[root@server01 work]# renice -n -19 -p 6262
6262 (process ID) old priority -17, new priority -19
[root@server01 work]# for x in {1..1000}; do ps -eo pid,ppid,user,stat,nice,comm | head -1 ;  ps -eo pid,ppid,user,stat,nice,comm | grep testing | grep -v grep ; sleep 2; echo "----------------------------------------------------------------------"; done
  PID  PPID USER     STAT  NI COMMAND
 6262  2941 root     S<+  -19 testing.sh
----------------------------------------------------------------------
  PID  PPID USER     STAT  NI COMMAND
 6262  2941 root     S<+  -19 testing.sh
^C
[root@server01 work]#


====================================


[root@server01 work]# cat testing.sh
#!/bin/bash
count=1
while true
do
echo -e "Count=${count} \t\t Current time - $(date)"
sleep 2
count=$[${count} + 1 ]
done
[root@server01 work]#
[root@server01 work]# chmod 755 testing.sh
[root@server01 work]#
========================= LAB - process management =====================
- OPen 4 tab on mputty for same server.
- in 1st tab run testing.sh 
- from 2nd tab
  #ps -aef | grep testing.sh 

- from 3rd tab 
   # for x in {1..1000}; do ps -eo pid,ppid,user,stat,nice,comm | head -1 ;  ps -eo pid,ppid,user,stat,nice,comm | grep testing | grep -v grep ; sleep 2; echo "----------------------------------------------------------------------"; done

- from 4th terminal 
   # renice -n -19 -p <PID>
   # renice -n -19 -p 6262
   
   
- ONce all above task done, then again cancel task in "1st tab"
  # nice -n -15 ./testing.sh 

And verify the same from all terminals.

================
uptime explaination:-

LAB-07
#####
STep-01
# mkdir /home/labuser/bin


STep02
# vim /home/labuser/bin/control

#!/bin/bash
while true; do
 echo -n "$@ " >> ~/control_outfile
 sleep 1
done 

STeo3)

chmod +x /home/labuser/bin/control

control technical 


(on he other terminal)
tail -f ~/control_outfile


Later (Current terminal execute below concepts).
 control technical 

Ctrl+z 

$ bg 
$ fg 

========================================================
CentOS / RHEL 7 : Booting process
The following steps summarize how the boot procedure happens in RHEL/CentOS 7.


The computer’s BIOS performs POST.
BIOS reads the MBR for the bootloader.
GRUB 2 bootloader loads the vmlinuz kernel image.
GRUB 2 extracts the contents of the initramfs image.
The kernel loads driver modules from initramfs.
Kernel starts the system’s first process, systemd.
The systemd process takes over. It:
Reads configuration files from the /etc/systemd directory
Reads file linked by /etc/systemd/system/default.target
Brings the system to the state defined by the system target
Executes /etc/rc.local



Linux Boot sequence w.r.t RHEL7 or newer version.
1) BIOS 
2) Bootloader  (GRUB 2)
3) Kernel 
4) systemd 


Linux Boot sequence w.r.t RHEL6 or lower version.
1) BIOS 
2) Bootloader  (GRUB 1.5)
3) Kernel 
4) init 

===============
BIOS:-
1) Activate POST service (Post ON Self Test).
2) When POST services completed then boot device got listed. 
  What is "boot device" ?
     Devicies which can start/Load operating system (OS).
	 Eg: 
	 1- Hard-Drive (Stat /dev/sda or /dev/sdb etc)
     2- DVD/CD or ISO 
	 3- USB 
	 4. Network Device Interface or Network INterface card (INC - must be  PXE supportted).
	     NOte: PXE boot means Boot over the network.
3) Selected boot device 
   - BIOS will read and execute 1st 512Bytes of selected boot device.
   
     512 bytes = 446 + 64 + 2  (Bootloader placed, This reason called MBR.
	 
#########################################		 


1. BISO 
POST (Power on Self Test)
From the system firmware, which can be the modern Universal Extended Firmware Interface (UEFI) or the classical Basic Input Output System (BIOS), the Power-On Self-Test (POST) is executed, and the hardware that is required to start the system is initialized.


2. Selecting the bootable device (With MBR)
– Master Boot Record (MBR) is the first 512 bytes of the boot drive that is read into memory by the BIOS.
– The next 64 bytes contain the partition table for the disk. The last two bytes are the “Magic Number” which is used for error detection.


– MBR discovers the bootable device and loads the GRUB2 boot loader into memory and transfers control over to it.

3. Loading the boot loader (GRUB2)
– The default bootloader program used on RHEL 7 is GRUB 2. GRUB stands for GRand Unified Bootloader. GRUB 2 replaces the older GRUB bootloader also called as legacy GRUB.
– The GRUB 2 configuration file is located at /boot/grub2/grub.cfg (Do not edit this file directly).

– GRUB 2 menu-configuration settings are taken from /etc/default/grub when generating grub.cfg.
– Sample /etc/default/grub file :



========
# cat /etc/default/grub
GRUB_TIMEOUT=5
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="rd.lvm.lv=rhel/swap crashkernel=auto rd.lvm.lv=rhel/root rhgb quiet net.ifnames=0"
GRUB_DISABLE_RECOVERY="true"
===========

– If changes are made to any of these parameters, you need to run grub2-mkconfig to re-generate the /boot/grub2/grub.cfg file.

# grub2-mkconfig –o /boot/grub2/grub.cfg
– GRUB2 searches the compressed kernel image file also called as vmlinuz in the /boot directory.
– GRUB2 loads the vmlinuz kernel image file into memory and extracts the contents of the initramfs image file into a temporary, memory-based file system (tmpfs).
– The initial RAM disk (initrd) is an initial root file system that is mounted before the real root file system.


initramfs
– The job of the initial RAM file system is to preload the block device modules, such as for IDE, SCSI, or RAID, so that the root file system, on which those modules normally reside, can then be accessed and mounted.
– The initramfs is bound to the kernel and the kernel mounts this initramfs as part of a two-stage boot process.
– The dracut utility creates initramfs whenever a new kernel is installed.
– Use the lsinitrd command to view the contents of the image created by dracut:

# lsinitrd | less
4. Loading the kernel
– The kernel starts the systemd process with a process ID of 1 (PID 1).


– It also loads the necessary driver modules from initrd image (initramfs-3.10.0-1160.71.1.el7.x86_64.img).
– The boot loader (GRUB2) may present a boot menu to the user, or can be configured to automatically start a default operating system.
– To load Linux, the kernel is loaded together with the initramfs. The initramfs contains kernel modules for all hardware that is required to boot, as well as the initial scripts required to proceed to the next stage of booting.
– On RHEL 7, the initramfs contains a complete operational system (which may be used for troubleshooting purposes).


5. Starting systemd
– The kernel starts the systemd process with a process ID of 1 (PID 1).

– systemd is the first process that starts after the system boots, and is the final process that is running when the system shuts down.
– It controls the final stages of booting and prepares the system for use. It also speeds up booting by loading services concurrently.
– systemd reads the file linked by /etc/systemd/system/default.target (for example, /usr/lib/systemd/system/multi-user.target) to determine the default system target (equivalent to run level). The system target file defines the services that systemd starts.
– systemd allows you to manage various types of units on a system, including services (name.service) and targets (name.target), devices (name.device), file system mount points (name.mount), and sockets (name.socket).


# pstree 


